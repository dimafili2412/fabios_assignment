class LogGeneratorConfig:
    """
    Config class for the log generator
    Loads settings from a JSON config file and applies defaults if keys are missing
    """
    DEFAULT_LINE_COUNT = 1000000
    DEFAULT_START_UNIX = 1741392000
    DEFAULT_END_UNIX = 1741416163
    DEFAULT_URL_LIST = ["/index.html", "/news", "/products/123"]
    DEFAULT_REFERRER_LIST = ["example"]
    DEFAULT_USER_AGENT_LIST = ["Mozilla/5.0"]
    DEFAULT_REQUEST_SIZE_RANGE = (100, 10000)
    DEFAULT_ERROR_SPIKES = True
    DEFAULT_TRAFFIC_SPIKES = True
    DEFAULT_ERROR_SPIKE_COUNT = 3
    DEFAULT_TRAFFIC_SPIKE_COUNT = 3
    DEFAULT_ERROR_SPIKE_LENGTH = 1000
    DEFAULT_TRAFFIC_SPIKE_LENGTH = 10000
    DEFAULT_ERROR_SPIKE_INTENSITY = 90
    DEFAULT_TRAFFIC_SPIKE_INTENSITY = 90
    DEFAULT_FILE_PATH = "log.txt"

    def __init__(self, config_path):
        """
        Initialize the configuration from a JSON file
        
        Parameters:
            config_path (str): Path to the config file
        """
        self.load_config(config_path)

    def load_config(self, config_path):
        """
        Load configs from the specified file
        
        Parameters:
            config_path (str): Path to the config file
        """
        try:
            with open(config_path, "r") as f:
                config = json.load(f)
        except Exception as e:
            raise ValueError(f"Failed to load configuration file: {e}")

        self.line_count = config.get("line_count", self.DEFAULT_LINE_COUNT)
        self.start_unix = config.get("start_unix", self.DEFAULT_START_UNIX)
        self.end_unix = config.get("end_unix", self.DEFAULT_END_UNIX)
        self.url_list = config.get("url_list", self.DEFAULT_URL_LIST)
        self.referrer_list = config.get("referrer_list", self.DEFAULT_REFERRER_LIST)
        self.user_agent_list = config.get("user_agent_list", self.DEFAULT_USER_AGENT_LIST)
        self.reqest_size_number_range = tuple(config.get("reqest_size_number_range", self.DEFAULT_REQUEST_SIZE_RANGE))
        self.error_spikes = config.get("error_spikes", self.DEFAULT_ERROR_SPIKES)
        self.traffic_spikes = config.get("traffic_spikes", self.DEFAULT_TRAFFIC_SPIKES)
        self.error_spike_count = config.get("error_spike_count", self.DEFAULT_ERROR_SPIKE_COUNT)
        self.traffic_spike_count = config.get("traffic_spike_count", self.DEFAULT_TRAFFIC_SPIKE_COUNT)
        self.error_spike_length = config.get("error_spike_length", self.DEFAULT_ERROR_SPIKE_LENGTH)
        self.traffic_spike_length = config.get("traffic_spike_length", self.DEFAULT_TRAFFIC_SPIKE_LENGTH)
        self.error_spike_intensity = config.get("error_spike_intensity", self.DEFAULT_ERROR_SPIKE_INTENSITY)
        self.traffic_spike_intensity = config.get("traffic_spike_intensity", self.DEFAULT_TRAFFIC_SPIKE_INTENSITY)
        self.file_path = config.get("file_path", self.DEFAULT_FILE_PATH)



class LogAggregatorConfig:
    """
    Configuration class for LogAggregator
    Loads and validates settings from a JSON configuration file
    """
    DEFAULT_FILE_PATH = "./log.txt"
    DEFAULT_CHUNK_SIZE = 10000
    DEFAULT_MAX_WORKERS = 8
    DEFAULT_TIME_INTERVAL = "hour"
    DEFAULT_SORT_ORDER = "desc"
    ALLOWED_TIME_INTERVALS = {"minute", "hour", "day", "week", "month", "year"}
    ALLOWED_SORT_ORDERS = {"asc", "desc"}
    DEFAULT_TIMING_SPIKE_THRESHOLD = 1.3
    DEFAULT_ERROR_SPIKE_THRESHOLD = 1.3

    def __init__(self, config_path):
        """
        Initialize the LogAggregatorConfig with configuration loaded from a JSON file
        
        Parameters:
            config_path (str): The file path to the JSON configuration file
        """
        self.load_config(config_path)

    def load_config(self, config_path):
        """
        Load configuration settings from the provided JSON file and apply default values for missing keys
        
        Parameters:
            config_path (str): The file path to the JSON configuration file
        
        Raises:
            ValueError: If the configuration file cannot be loaded or contains invalid values
        """
        try:
            with open(config_path, 'r') as f:
                config = json.load(f)
        except Exception as e:
            raise ValueError(f"Failed to load configuration file: {e}")

        self.file_path = config.get("file_path", self.DEFAULT_FILE_PATH)
        self.chunk_size = config.get("chunk_size", self.DEFAULT_CHUNK_SIZE)
        self.max_workers = config.get("max_workers", self.DEFAULT_MAX_WORKERS)
        self.time_interval = config.get("time_interval", self.DEFAULT_TIME_INTERVAL)
        self.sort_order = config.get("sort_order", self.DEFAULT_SORT_ORDER)
        self.timing_spike_threshold = config.get("timing_spike_threshold", self.DEFAULT_TIMING_SPIKE_THRESHOLD)
        self.error_spike_threshold = config.get("error_spike_threshold", self.DEFAULT_ERROR_SPIKE_THRESHOLD)

        if not isinstance(self.chunk_size, int) or self.chunk_size <= 0:
            raise ValueError("chunk_size must be a positive integer")
        if not isinstance(self.max_workers, int) or self.max_workers <= 0:
            raise ValueError("max_workers must be a positive integer")
        if self.time_interval not in self.ALLOWED_TIME_INTERVALS:
            raise ValueError(f"time_interval must be one of {self.ALLOWED_TIME_INTERVALS}.")
        if self.sort_order not in self.ALLOWED_SORT_ORDERS:
            raise ValueError("sort_order must be either 'asc' or 'desc'")


both those classsed need to be refactored so there is a  main class and extensions, also add validations to everything and all numbers need to be int instead of string 